===== ./target/test-classes/application-test.properties =====
spring.datasource.url=jdbc:h2:mem:testdb
spring.datasource.driverClassName=org.h2.Driver
spring.datasource.username=sa
spring.datasource.password=

spring.jpa.database-platform=org.hibernate.dialect.H2Dialect
spring.jpa.hibernate.ddl-auto=create-drop

===== ./target/classes/application.properties =====
spring.application.name=ehrbackend
server.port=8085

spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true
logging.level.org.springframework.boot=DEBUG
logging.level.ch.zhaw=DEBUG

logging.level.org.hibernate.SQL=DEBUG
logging.level.org.springframework.jdbc.core=DEBUG
logging.level.org.springframework=INFO
logging.level.org.springframework.boot.autoconfigure=DEBUG

spring.datasource.username=ehruser
spring.datasource.password=ehrpass
spring.datasource.driverClassName=org.postgresql.Driver
spring.sql.init.mode = always

spring.jpa.hibernate.ddl-auto=create-drop

default.user.username=user
default.user.password=password
default.admin.username=admin
default.admin.password=adminpass
default.superuser.username=superuser
default.superuser.password=superpass

===== ./target/maven-archiver/pom.properties =====
artifactId=ehrbackend
groupId=ch.zhaw.init.ehr
version=0.0.1-SNAPSHOT


===== ./.mvn/wrapper/maven-wrapper.properties =====
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
wrapperVersion=3.3.2
distributionType=only-script
distributionUrl=https://repo.maven.apache.org/maven2/org/apache/maven/apache-maven/3.9.9/apache-maven-3.9.9-bin.zip


===== ./src/test/resources/application-test.properties =====
spring.datasource.url=jdbc:h2:mem:testdb
spring.datasource.driverClassName=org.h2.Driver
spring.datasource.username=sa
spring.datasource.password=

spring.jpa.database-platform=org.hibernate.dialect.H2Dialect
spring.jpa.hibernate.ddl-auto=create-drop

===== ./src/test/java/ch/zhaw/init/ehr/ehrbackend/EhrbackendApplicationTests.java =====
package ch.zhaw.init.ehr.ehrbackend;

import org.junit.jupiter.api.Test;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.ActiveProfiles;

@SpringBootTest
@ActiveProfiles("test")
class EhrbackendApplicationTests {
    @Test
    void contextLoads() {
    }
}

===== ./src/main/resources/application.properties =====
spring.application.name=ehrbackend
server.port=8085

spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true
logging.level.org.springframework.boot=DEBUG
logging.level.ch.zhaw=DEBUG

logging.level.org.hibernate.SQL=DEBUG
logging.level.org.springframework.jdbc.core=DEBUG
logging.level.org.springframework=INFO
logging.level.org.springframework.boot.autoconfigure=DEBUG

spring.datasource.username=ehruser
spring.datasource.password=ehrpass
spring.datasource.driverClassName=org.postgresql.Driver
spring.sql.init.mode = always

spring.jpa.hibernate.ddl-auto=create-drop

default.user.username=user
default.user.password=password
default.admin.username=admin
default.admin.password=adminpass
default.superuser.username=superuser
default.superuser.password=superpass

===== ./src/main/java/ch/zhaw/init/ehr/ehrbackend/repository/DoctorRepository.java =====
package ch.zhaw.init.ehr.ehrbackend.repository;

import ch.zhaw.init.ehr.ehrbackend.model.Doctor;
import org.springframework.data.jpa.repository.JpaRepository;

public interface DoctorRepository extends JpaRepository<Doctor, Long> {
}


===== ./src/main/java/ch/zhaw/init/ehr/ehrbackend/repository/MedicalRecordRepository.java =====
package ch.zhaw.init.ehr.ehrbackend.repository;

import ch.zhaw.init.ehr.ehrbackend.model.MedicalRecord;
import org.springframework.data.jpa.repository.JpaRepository;

import java.util.List;

public interface MedicalRecordRepository extends JpaRepository<MedicalRecord, Long> {
    List<MedicalRecord> findByPatientId(Long patientId);
}


===== ./src/main/java/ch/zhaw/init/ehr/ehrbackend/repository/UserRepository.java =====
package ch.zhaw.init.ehr.ehrbackend.repository;

import ch.zhaw.init.ehr.ehrbackend.model.User;
import jakarta.persistence.*;
import org.springframework.data.jpa.repository.JpaRepository;
import java.util.Optional;

public interface UserRepository extends JpaRepository<User, Long> {
    boolean existsByUsername(String username);
    Optional<User> findByUsername(String username);
}


===== ./src/main/java/ch/zhaw/init/ehr/ehrbackend/repository/PatientRepository.java =====
package ch.zhaw.init.ehr.ehrbackend.repository;

import ch.zhaw.init.ehr.ehrbackend.model.Patient;
import org.springframework.data.jpa.repository.JpaRepository;

public interface PatientRepository extends JpaRepository<Patient, Long> {
}

===== ./src/main/java/ch/zhaw/init/ehr/ehrbackend/DataInitializer.java =====
package ch.zhaw.init.ehr.ehrbackend;

import ch.zhaw.init.ehr.ehrbackend.model.User;
import ch.zhaw.init.ehr.ehrbackend.model.UserRole;
import ch.zhaw.init.ehr.ehrbackend.repository.UserRepository;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.boot.CommandLineRunner;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Component;


@Component
public class DataInitializer implements CommandLineRunner {

    private static final org.slf4j.Logger logger = LoggerFactory.getLogger(DataInitializer.class);

    private final UserRepository userRepository;
    private final PasswordEncoder passwordEncoder;

    // Values provided via application.properties or environment variables
    @Value("${default.user.username:user}")
    private String defaultUserUsername;

    @Value("${default.user.password:password}")
    private String defaultUserPassword;

    @Value("${default.admin.username:admin}")
    private String defaultAdminUsername;

    @Value("${default.admin.password:adminpass}")
    private String defaultAdminPassword;

    @Value("${default.superuser.username:superuser}")
    private String defaultSuperuserUsername;

    @Value("${default.superuser.password:superpass}")
    private String defaultSuperuserPassword;

    public DataInitializer(UserRepository userRepository, PasswordEncoder passwordEncoder) {
        this.userRepository = userRepository;
        this.passwordEncoder = passwordEncoder;
        logger.info("✅✅✅ DataInitializer CONSTRUCTOR CALLED");
    }

    @Override
    public void run(String... args) {
        System.out.println("DataInitializer running...");
        logger.info("DataInitializer running...");
        // Create a default regular user if not exists
        if (!userRepository.existsByUsername(defaultUserUsername)) {
            User user = new User();
            user.setUsername(defaultUserUsername);
            user.setPassword(passwordEncoder.encode(defaultUserPassword));
            user.setRole(UserRole.ROLE_STANDARDUSER);
            userRepository.save(user);
        }

        // Create a default admin if not exists
        if (!userRepository.existsByUsername(defaultAdminUsername)) {
            User admin = new User();
            admin.setUsername(defaultAdminUsername);
            admin.setPassword(passwordEncoder.encode(defaultAdminPassword));
            admin.setRole(UserRole.ROLE_ADMIN);
            userRepository.save(admin);
        }

        // Create a default superuser if not exists
        if (!userRepository.existsByUsername(defaultSuperuserUsername)) {
            User superuser = new User();
            superuser.setUsername(defaultSuperuserUsername);
            superuser.setPassword(passwordEncoder.encode(defaultSuperuserPassword));
            superuser.setRole(UserRole.ROLE_SUPERUSER);
            userRepository.save(superuser);
        }
    }
}






===== ./src/main/java/ch/zhaw/init/ehr/ehrbackend/config/SecurityConfig.java =====
package ch.zhaw.init.ehr.ehrbackend.config;

import ch.zhaw.init.ehr.ehrbackend.service.UserService;

import java.util.List;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.authentication.dao.DaoAuthenticationProvider;
import org.springframework.security.config.annotation.method.configuration.EnableMethodSecurity;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.web.SecurityFilterChain;
import org.springframework.web.cors.CorsConfiguration;
import org.springframework.web.cors.CorsConfigurationSource;
import org.springframework.web.cors.UrlBasedCorsConfigurationSource;

@Configuration
@EnableWebSecurity
@EnableMethodSecurity
public class SecurityConfig {

    private final UserService userService;
    private final PasswordEncoder passwordEncoder;

    public SecurityConfig(UserService userService, PasswordEncoder passwordEncoder) {
        this.userService = userService;
        this.passwordEncoder = passwordEncoder;
    }

    @Bean
    public DaoAuthenticationProvider authenticationProvider() {
        DaoAuthenticationProvider provider = new DaoAuthenticationProvider();
        provider.setUserDetailsService(userService);
        provider.setPasswordEncoder(passwordEncoder);
        return provider;
    }

    @Bean
    public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {
        http
            .authorizeHttpRequests(auth -> auth
                .requestMatchers("/admin/**").hasAnyRole("ADMIN", "SUPERUSER")
                .requestMatchers("/superuser/**").hasRole("SUPERUSER")
                .requestMatchers("/doctor/**").hasRole("DOCTOR")
                .requestMatchers("/patient/**").hasRole("PATIENT")
                .requestMatchers("/public/**", "/login").permitAll()
                .anyRequest().authenticated()
            )
            .formLogin()
            .and()
            .logout();

        return http.build();
    }

    @Bean
    public CorsConfigurationSource corsConfigurationSource() {
        CorsConfiguration configuration = new CorsConfiguration();
        configuration.setAllowedOrigins(List.of("http://localhost:3000"));
        configuration.setAllowedMethods(List.of("GET", "POST", "PUT", "DELETE"));
        configuration.setAllowedHeaders(List.of("*"));

        UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();
        source.registerCorsConfiguration("/**", configuration);
        return source;
    }
}

===== ./src/main/java/ch/zhaw/init/ehr/ehrbackend/config/PasswordEncoderConfig.java =====
package ch.zhaw.init.ehr.ehrbackend.config;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;

@Configuration
public class PasswordEncoderConfig {
    
    @Bean
    public PasswordEncoder passwordEncoder() {
        return new BCryptPasswordEncoder();
    }
}

===== ./src/main/java/ch/zhaw/init/ehr/ehrbackend/restservice/Greeting.java =====
package ch.zhaw.init.ehr.ehrbackend.restservice;

public record Greeting(long id, String content) { }

===== ./src/main/java/ch/zhaw/init/ehr/ehrbackend/restservice/GreetingController.java =====
package ch.zhaw.init.ehr.ehrbackend.restservice;

import java.util.concurrent.atomic.AtomicLong;

import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

@RestController
public class GreetingController {

	private static final String template = "Hello, %s!";
	private final AtomicLong counter = new AtomicLong();

	@GetMapping("/greetings")
	public Greeting greeting(@RequestParam(value = "name", defaultValue = "World") String name) {
		return new Greeting(counter.incrementAndGet(), String.format(template, name));
	}
}

===== ./src/main/java/ch/zhaw/init/ehr/ehrbackend/controller/MedicalRecordController.java =====
package ch.zhaw.init.ehr.ehrbackend.controller;

import ch.zhaw.init.ehr.ehrbackend.model.MedicalRecord;
import ch.zhaw.init.ehr.ehrbackend.service.MedicalRecordService;
import lombok.RequiredArgsConstructor;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/record")
@RequiredArgsConstructor
public class MedicalRecordController {

    private final MedicalRecordService medicalRecordService;

    @PostMapping
    public MedicalRecord createRecord(@RequestBody MedicalRecord record) {
        return medicalRecordService.saveRecord(record);
    }

    @GetMapping("/{id}")
    public MedicalRecord getRecord(@PathVariable Long id) {
        return medicalRecordService.getRecord(id);
    }

    @GetMapping("/patient/{patientId}")
    public List<MedicalRecord> getRecordsByPatient(@PathVariable Long patientId) {
        return medicalRecordService.getRecordsByPatient(patientId);
    }
}


===== ./src/main/java/ch/zhaw/init/ehr/ehrbackend/controller/DoctorController.java =====
package ch.zhaw.init.ehr.ehrbackend.controller;

import ch.zhaw.init.ehr.ehrbackend.model.Doctor;
import ch.zhaw.init.ehr.ehrbackend.service.DoctorService;
import lombok.RequiredArgsConstructor;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/doctor")
@RequiredArgsConstructor
public class DoctorController {

    private final DoctorService doctorService;

    @PostMapping
    public Doctor createDoctor(@RequestBody Doctor doctor) {
        return doctorService.saveDoctor(doctor);
    }

    @GetMapping("/{id}")
    public Doctor getDoctor(@PathVariable Long id) {
        return doctorService.getDoctor(id);
    }

    @GetMapping
    public List<Doctor> getAllDoctors() {
        return doctorService.getAllDoctors();
    }
}


===== ./src/main/java/ch/zhaw/init/ehr/ehrbackend/controller/PatientController.java =====
package ch.zhaw.init.ehr.ehrbackend.controller;

import ch.zhaw.init.ehr.ehrbackend.model.Patient;
import ch.zhaw.init.ehr.ehrbackend.service.PatientService;
import lombok.RequiredArgsConstructor;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/patient")
@RequiredArgsConstructor
public class PatientController {

    private final PatientService patientService;

    @PostMapping
    public Patient createPatient(@RequestBody Patient patient) {
        return patientService.savePatient(patient);
    }

    @GetMapping("/{id}")
    public Patient getPatient(@PathVariable Long id) {
        return patientService.getPatient(id);
    }

    @GetMapping
    public List<Patient> getAllPatients() {
        return patientService.getAllPatients();
    }
}


===== ./src/main/java/ch/zhaw/init/ehr/ehrbackend/controller/UserController.java =====
package ch.zhaw.init.ehr.ehrbackend.controller;

import ch.zhaw.init.ehr.ehrbackend.model.User;
import ch.zhaw.init.ehr.ehrbackend.service.UserService;
import lombok.RequiredArgsConstructor;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/user")
@RequiredArgsConstructor
public class UserController {

    private final UserService userService;

    @PostMapping
    public User createUser(@RequestBody User user) {
        return userService.saveUser(user);
    }

    @GetMapping("/{id}")
    public User getUser(@PathVariable Long id) {
        return userService.getUser(id);
    }

    @GetMapping
    public List<User> getAllUsers() {
        return userService.getAllUsers();
    }
}


===== ./src/main/java/ch/zhaw/init/ehr/ehrbackend/EhrbackendApplication.java =====
package ch.zhaw.init.ehr.ehrbackend;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.actuate.autoconfigure.metrics.MetricsProperties.Data;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.boot.autoconfigure.domain.EntityScan;
import org.springframework.context.annotation.Configuration;
import org.springframework.data.jpa.repository.config.EnableJpaRepositories;

@Configuration
//@EnableJpaRepositories(basePackages = { "ch.zhaw.init.ehr.ehrbackend.repository" })
//@SpringBootApplication(scanBasePackages = { "ch.zhaw.init.ehr.ehrbackend" })
public class EhrbackendApplication {

	public static void main(String[] args) {
		
		var context = SpringApplication.run(EhrbackendApplication.class, args);
		context.getBean(HelloRunner.class).run(args);
		context.getBean(DataInitializer.class).run(args);
	}

}


===== ./src/main/java/ch/zhaw/init/ehr/ehrbackend/HelloRunner.java =====
package ch.zhaw.init.ehr.ehrbackend;

import org.slf4j.LoggerFactory;
import org.springframework.boot.CommandLineRunner;
import org.springframework.stereotype.Component;

@Component
public class HelloRunner implements CommandLineRunner {
    private static final org.slf4j.Logger logger = LoggerFactory.getLogger(DataInitializer.class);

    @Override
    public void run(String... args) {
        logger.info("✅✅✅ DataInitializer CONSTRUCTOR CALLED");
        logger.debug("✅✅✅ DataInitializer CONSTRUCTOR CALLED");
        logger.error("✅✅✅ DataInitializer CONSTRUCTOR CALLED");
        System.out.println("✅ HelloRunner ran");
    }
}

===== ./src/main/java/ch/zhaw/init/ehr/ehrbackend/model/UserRole.java =====
package ch.zhaw.init.ehr.ehrbackend.model;

public enum UserRole {
    ROLE_SUPERUSER,
    ROLE_ADMIN,
    ROLE_DOCTOR,
    ROLE_PATIENT,
    ROLE_STANDARDUSER
}

===== ./src/main/java/ch/zhaw/init/ehr/ehrbackend/model/User.java =====
package ch.zhaw.init.ehr.ehrbackend.model;

import java.util.Set;

import jakarta.persistence.*;
import lombok.Getter;
import lombok.Setter;

@Getter
@Setter
@Entity
@Table(name = "users")
public class User {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @Column(unique = true, nullable = false)
    private String username;

    @Column(nullable = false)
    private String password;  // BCrypt encoded

    @Enumerated(EnumType.STRING)
    private UserRole role;

}


===== ./src/main/java/ch/zhaw/init/ehr/ehrbackend/model/Doctor.java =====
package ch.zhaw.init.ehr.ehrbackend.model;

import jakarta.persistence.*;
import lombok.*;

@Entity
@Getter @Setter @NoArgsConstructor @AllArgsConstructor @Builder
public class Doctor {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    private String firstName;
    private String lastName;
    private String speciality; 
}

===== ./src/main/java/ch/zhaw/init/ehr/ehrbackend/model/Patient.java =====
package ch.zhaw.init.ehr.ehrbackend.model;

import jakarta.persistence.*;
import lombok.*;

@Entity
@Getter @Setter @NoArgsConstructor @AllArgsConstructor @Builder
public class Patient {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    
    private String firstName;
    private String lastName;
    private String dateOfBirth; //TODO: change to LocalDate
}

===== ./src/main/java/ch/zhaw/init/ehr/ehrbackend/model/MedicalRecord.java =====
package ch.zhaw.init.ehr.ehrbackend.model;

import jakarta.persistence.*;
import lombok.*;

@Entity
@Getter @Setter @NoArgsConstructor @AllArgsConstructor @Builder
public class MedicalRecord {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @ManyToOne
    private Patient patient;

    @ManyToOne
    private Doctor doctor;

    @Column(length = 5000)
    private String notes;

    private String date; // TODO: change to LocalDate
}


===== ./src/main/java/ch/zhaw/init/ehr/ehrbackend/service/UserService.java =====
package ch.zhaw.init.ehr.ehrbackend.service;

import ch.zhaw.init.ehr.ehrbackend.model.User;
import ch.zhaw.init.ehr.ehrbackend.repository.UserRepository;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.security.core.userdetails.User.UserBuilder;
import org.springframework.security.core.userdetails.User.UserBuilder.*;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;

@Service
public class UserService implements UserDetailsService {

    @Autowired
    private UserRepository userRepository;

    @Autowired
    private PasswordEncoder passwordEncoder;

    @Override
    public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {
        User user = userRepository.findByUsername(username)
            .orElseThrow(() -> new UsernameNotFoundException("User not found"));

        return org.springframework.security.core.userdetails.User
                .withUsername(user.getUsername())
                .password(user.getPassword())
                .roles(user.getRole().name().replace("ROLE_", ""))
                .build();
    }

    public User saveUser(User user) {
        user.setPassword(passwordEncoder.encode(user.getPassword()));
        return userRepository.save(user);
    }

    public User getUser(Long id) {
        return userRepository.findById(id)
                .orElseThrow(() -> new RuntimeException("User not found: " + id));
    }

    public List<User> getAllUsers() {
        return userRepository.findAll();
    }
}


===== ./src/main/java/ch/zhaw/init/ehr/ehrbackend/service/PatientService.java =====
package ch.zhaw.init.ehr.ehrbackend.service;

import ch.zhaw.init.ehr.ehrbackend.model.Patient;
import ch.zhaw.init.ehr.ehrbackend.repository.PatientRepository;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
@RequiredArgsConstructor
public class PatientService {
    private final PatientRepository patientRepository;

    public Patient savePatient(Patient patient) {
        return patientRepository.save(patient);
    }

    public List<Patient> getAllPatients() {
        return patientRepository.findAll();
    }

    public Patient getPatient(Long id) {
        return patientRepository.findById(id).orElseThrow();
    }
}

===== ./src/main/java/ch/zhaw/init/ehr/ehrbackend/service/MedicalRecordService.java =====
package ch.zhaw.init.ehr.ehrbackend.service;

import ch.zhaw.init.ehr.ehrbackend.model.MedicalRecord;
import ch.zhaw.init.ehr.ehrbackend.repository.MedicalRecordRepository;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
@RequiredArgsConstructor
public class MedicalRecordService {

    private final MedicalRecordRepository medicalRecordRepository;

    public MedicalRecord saveRecord(MedicalRecord record) {
        return medicalRecordRepository.save(record);
    }

    public MedicalRecord getRecord(Long id) {
        return medicalRecordRepository.findById(id)
                .orElseThrow(() -> new RuntimeException("Record not found: " + id));
    }

    public List<MedicalRecord> getRecordsByPatient(Long patientId) {
        return medicalRecordRepository.findByPatientId(patientId);
    }
}


===== ./src/main/java/ch/zhaw/init/ehr/ehrbackend/service/DoctorService.java =====
package ch.zhaw.init.ehr.ehrbackend.service;

import ch.zhaw.init.ehr.ehrbackend.model.Doctor;
import ch.zhaw.init.ehr.ehrbackend.repository.DoctorRepository;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
@RequiredArgsConstructor
public class DoctorService {

    private final DoctorRepository doctorRepository;

    public Doctor saveDoctor(Doctor doctor) {
        return doctorRepository.save(doctor);
    }

    public Doctor getDoctor(Long id) {
        return doctorRepository.findById(id)
                .orElseThrow(() -> new RuntimeException("Doctor not found: " + id));
    }

    public List<Doctor> getAllDoctors() {
        return doctorRepository.findAll();
    }
}

