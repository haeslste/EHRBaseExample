===== ./target/test-classes/application-test.properties =====
spring.datasource.url=jdbc:h2:mem:testdb
spring.datasource.driverClassName=org.h2.Driver
spring.datasource.username=sa
spring.datasource.password=

spring.jpa.database-platform=org.hibernate.dialect.H2Dialect
spring.jpa.hibernate.ddl-auto=create-drop

===== ./target/classes/application.properties =====
spring.application.name=ehrbackend
server.port=8085

spring.servlet.multipart.max-file-size=10MB
spring.servlet.multipart.max-request-size=10MB

spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true
logging.level.org.springframework.boot=DEBUG
logging.level.ch.zhaw.init.ehr.ehrbackend=DEBUG
logging.level.ch.zhaw=DEBUG

logging.level.org.hibernate.SQL=DEBUG
logging.level.org.springframework.jdbc.core=DEBUG
logging.level.org.springframework=INFO
logging.level.org.springframework.boot.autoconfigure=DEBUG

spring.datasource.username=ehruser
spring.datasource.password=ehrpass
spring.datasource.driverClassName=org.postgresql.Driver
spring.sql.init.mode = always

spring.jpa.hibernate.ddl-auto=create-drop

default.user.username=user
default.user.password=password
default.admin.username=admin
default.admin.password=adminpass
default.superuser.username=superuser
default.superuser.password=superpass

===== ./target/maven-archiver/pom.properties =====
artifactId=ehrbackend
groupId=ch.zhaw.init.ehr
version=0.0.1-SNAPSHOT


===== ./.mvn/wrapper/maven-wrapper.properties =====
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
wrapperVersion=3.3.2
distributionType=only-script
distributionUrl=https://repo.maven.apache.org/maven2/org/apache/maven/apache-maven/3.9.9/apache-maven-3.9.9-bin.zip


===== ./src/test/resources/application-test.properties =====
spring.datasource.url=jdbc:h2:mem:testdb
spring.datasource.driverClassName=org.h2.Driver
spring.datasource.username=sa
spring.datasource.password=

spring.jpa.database-platform=org.hibernate.dialect.H2Dialect
spring.jpa.hibernate.ddl-auto=create-drop

===== ./src/test/java/ch/zhaw/init/ehr/ehrbackend/EhrbackendApplicationTests.java =====
package ch.zhaw.init.ehr.ehrbackend;

import org.junit.jupiter.api.Test;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.test.context.ActiveProfiles;

import ch.zhaw.init.ehr.ehrbackend.service.EhrbaseRestClient;


@SpringBootTest
@ActiveProfiles("test")
class EhrbackendApplicationTests {
    @MockBean
    private EhrbaseRestClient ehrbaseRestClient;

    @Test
    void contextLoads() {
    }
}

===== ./src/main/resources/application.properties =====
spring.application.name=ehrbackend
server.port=8085

spring.servlet.multipart.max-file-size=10MB
spring.servlet.multipart.max-request-size=10MB

spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true
logging.level.org.springframework.boot=DEBUG
logging.level.ch.zhaw.init.ehr.ehrbackend=DEBUG
logging.level.ch.zhaw=DEBUG

logging.level.org.hibernate.SQL=DEBUG
logging.level.org.springframework.jdbc.core=DEBUG
logging.level.org.springframework=INFO
logging.level.org.springframework.boot.autoconfigure=DEBUG

spring.datasource.username=ehruser
spring.datasource.password=ehrpass
spring.datasource.driverClassName=org.postgresql.Driver
spring.sql.init.mode = always

spring.jpa.hibernate.ddl-auto=create-drop

default.user.username=user
default.user.password=password
default.admin.username=admin
default.admin.password=adminpass
default.superuser.username=superuser
default.superuser.password=superpass

===== ./src/main/java/ch/zhaw/init/ehr/ehrbackend/dto/CompositionSubmissionRequest.java =====
package ch.zhaw.init.ehr.ehrbackend.dto;

import lombok.Data;
import java.util.Map;

@Data
public class CompositionSubmissionRequest {
    private String ehrId;           // EHRbase patient ID
    private String templateId;      // e.g., "body_weight"
    private Map<String, Object> compositionJson; // JSON  (matching WebTemplate)
}

===== ./src/main/java/ch/zhaw/init/ehr/ehrbackend/dto/DoctorDto.java =====
package ch.zhaw.init.ehr.ehrbackend.dto;

import lombok.AllArgsConstructor;
import lombok.Data;

@Data
@AllArgsConstructor
public class DoctorDto {
    private Long id;
    private String firstName;
    private String lastName;
    private String speciality;
    private UserDto user;
}


===== ./src/main/java/ch/zhaw/init/ehr/ehrbackend/dto/TemplateUploadResponse.java =====
// dto/TemplateUploadResponse.java
package ch.zhaw.init.ehr.ehrbackend.dto;

import lombok.AllArgsConstructor;
import lombok.Data;

@Data
@AllArgsConstructor
public class TemplateUploadResponse {
    private String message;
    private String templateId;
}


===== ./src/main/java/ch/zhaw/init/ehr/ehrbackend/dto/PatientDto.java =====
package ch.zhaw.init.ehr.ehrbackend.dto;

import lombok.AllArgsConstructor;
import lombok.Data;

@Data
@AllArgsConstructor
public class PatientDto {
    private Long id;
    private String firstName;
    private String lastName;
    private String dateOfBirth;
    private UserDto user;
}


===== ./src/main/java/ch/zhaw/init/ehr/ehrbackend/dto/LoginRequest.java =====
package ch.zhaw.init.ehr.ehrbackend.dto;

public class LoginRequest {
    public String username;
    public String password;
}


===== ./src/main/java/ch/zhaw/init/ehr/ehrbackend/dto/LoginResponse.java =====
package ch.zhaw.init.ehr.ehrbackend.dto;

public class LoginResponse {
    public String token;
    public String role;

    public LoginResponse(String token, String role) {
        this.token = token;
        this.role = role;
    }
}


===== ./src/main/java/ch/zhaw/init/ehr/ehrbackend/dto/UserDto.java =====
package ch.zhaw.init.ehr.ehrbackend.dto;

import ch.zhaw.init.ehr.ehrbackend.model.UserRole;
import lombok.AllArgsConstructor;
import lombok.Data;

@Data
@AllArgsConstructor
public class UserDto {
    private Long id;
    private String username;
    private UserRole role;
}


===== ./src/main/java/ch/zhaw/init/ehr/ehrbackend/repository/FormTemplateRepository.java =====
package ch.zhaw.init.ehr.ehrbackend.repository;

import ch.zhaw.init.ehr.ehrbackend.model.FormTemplate;
import org.springframework.data.jpa.repository.JpaRepository;

import java.util.Optional;

public interface FormTemplateRepository extends JpaRepository<FormTemplate, Long> {
    Optional<FormTemplate> findByTemplateId(String templateId);
}

===== ./src/main/java/ch/zhaw/init/ehr/ehrbackend/repository/TemplateRepository.java =====
package ch.zhaw.init.ehr.ehrbackend.repository;

import ch.zhaw.init.ehr.ehrbackend.model.Template;
import org.springframework.data.jpa.repository.JpaRepository;

import java.util.Optional;

public interface TemplateRepository extends JpaRepository<Template, Long> {
    boolean existsByTemplateId(String templateId);
    Optional<Template> findByTemplateId(String templateId);
}


===== ./src/main/java/ch/zhaw/init/ehr/ehrbackend/repository/DoctorRepository.java =====
package ch.zhaw.init.ehr.ehrbackend.repository;

import ch.zhaw.init.ehr.ehrbackend.model.Doctor;
import org.springframework.data.jpa.repository.JpaRepository;

public interface DoctorRepository extends JpaRepository<Doctor, Long> {
}


===== ./src/main/java/ch/zhaw/init/ehr/ehrbackend/repository/MedicalRecordRepository.java =====
package ch.zhaw.init.ehr.ehrbackend.repository;

import ch.zhaw.init.ehr.ehrbackend.model.MedicalRecord;
import org.springframework.data.jpa.repository.JpaRepository;

import java.util.List;

public interface MedicalRecordRepository extends JpaRepository<MedicalRecord, Long> {
    List<MedicalRecord> findByPatientId(Long patientId);
}


===== ./src/main/java/ch/zhaw/init/ehr/ehrbackend/repository/UserRepository.java =====
package ch.zhaw.init.ehr.ehrbackend.repository;

import ch.zhaw.init.ehr.ehrbackend.model.User;
import jakarta.persistence.*;
import org.springframework.data.jpa.repository.JpaRepository;
import java.util.Optional;

public interface UserRepository extends JpaRepository<User, Long> {
    boolean existsByUsername(String username);
    Optional<User> findByUsername(String username);
}


===== ./src/main/java/ch/zhaw/init/ehr/ehrbackend/repository/PatientRepository.java =====
package ch.zhaw.init.ehr.ehrbackend.repository;

import ch.zhaw.init.ehr.ehrbackend.model.Patient;
import org.springframework.data.jpa.repository.JpaRepository;

public interface PatientRepository extends JpaRepository<Patient, Long> {
}

===== ./src/main/java/ch/zhaw/init/ehr/ehrbackend/config/SecurityConfig.java =====
package ch.zhaw.init.ehr.ehrbackend.config;

import ch.zhaw.init.ehr.ehrbackend.service.UserService;

import java.util.List;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.http.HttpMethod;
import org.springframework.security.authentication.dao.DaoAuthenticationProvider;
import org.springframework.security.config.annotation.method.configuration.EnableMethodSecurity;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configurers.AbstractHttpConfigurer;
import org.springframework.security.config.http.SessionCreationPolicy;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.web.SecurityFilterChain;
import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;
import org.springframework.web.cors.CorsConfiguration;
import org.springframework.web.cors.CorsConfigurationSource;
import org.springframework.web.cors.UrlBasedCorsConfigurationSource;
import ch.zhaw.init.ehr.ehrbackend.security.JWTAuthFilter; // Ensure this is the correct package for JwtAuthenticationFilter

@Configuration
@EnableWebSecurity
@EnableMethodSecurity
public class SecurityConfig {

    private final UserService userService;
    private final PasswordEncoder passwordEncoder;

    public SecurityConfig(UserService userService, PasswordEncoder passwordEncoder) {
        this.userService = userService;
        this.passwordEncoder = passwordEncoder;
    }

    @Bean
    public DaoAuthenticationProvider authenticationProvider() {
        DaoAuthenticationProvider provider = new DaoAuthenticationProvider();
        provider.setUserDetailsService(userService);
        provider.setPasswordEncoder(passwordEncoder);
        return provider;
    }

    @Bean
    public SecurityFilterChain securityFilterChain(HttpSecurity http, JWTAuthFilter jwtAuthFilter) throws Exception{
        http
            .csrf(csrf -> csrf.disable()) // Disable CSRF for stateless API
            .cors(cors -> cors.configurationSource(corsConfigurationSource()))
            .authorizeHttpRequests(auth -> auth
                .requestMatchers( "/admin/templates/webtemplates/{templateId}").hasAnyRole("ADMIN", "SUPERUSER")
                .requestMatchers("/admin/**").hasAnyRole("ADMIN", "SUPERUSER")
                .requestMatchers("/superuser/**").hasRole("SUPERUSER")
                .requestMatchers("/doctor/**").hasAnyRole("ADMIN", "SUPERUSER", "DOCTOR")
                .requestMatchers("/patient/**").hasAnyRole("ADMIN", "SUPERUSER", "DOCTOR")
                .requestMatchers( "/template/{templateId}/webtemplate").hasAnyRole("ADMIN", "SUPERUSER")
                .requestMatchers("/formtemplate/**").hasAnyRole("ADMIN", "SUPERUSER")
                .requestMatchers("/template/**").hasAnyRole("ADMIN", "SUPERUSER")
                .requestMatchers("/admin/**").hasAnyRole("ADMIN", "SUPERUSER")
                .requestMatchers(HttpMethod.POST, "/ehr/composition").hasAnyRole("DOCTOR", "ADMIN", "SUPERUSER")
                .requestMatchers(HttpMethod.DELETE, "/doctor/**", "/patient/**").hasAnyRole("ADMIN", "SUPERUSER")
                .requestMatchers("/public/**", "/login").permitAll()
                .anyRequest().authenticated()
            )
            .sessionManagement(session -> session.sessionCreationPolicy(SessionCreationPolicy.STATELESS))
            .authenticationProvider(authenticationProvider())
            .addFilterBefore(jwtAuthFilter, UsernamePasswordAuthenticationFilter.class);
 

        return http.build();
    }

    @Bean
    public CorsConfigurationSource corsConfigurationSource() {
        CorsConfiguration configuration = new CorsConfiguration();
        configuration.setAllowedOrigins(List.of("http://localhost:3000")); // allow frontend
        configuration.setAllowedMethods(List.of("GET", "POST", "PUT", "DELETE"));
        configuration.setAllowedHeaders(List.of("*"));
        configuration.setAllowCredentials(true); // <-- also needed if you're using cookies
    
        UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();
        source.registerCorsConfiguration("/**", configuration);
        return source;
    }
}

===== ./src/main/java/ch/zhaw/init/ehr/ehrbackend/config/DataInitializer.java =====
package ch.zhaw.init.ehr.ehrbackend.config;

import ch.zhaw.init.ehr.ehrbackend.model.*;
import ch.zhaw.init.ehr.ehrbackend.repository.*;
import jakarta.annotation.PostConstruct;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.boot.CommandLineRunner;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Component;

@Component
public class DataInitializer implements CommandLineRunner {

    private static final Logger logger = LoggerFactory.getLogger(DataInitializer.class);

    private final UserRepository userRepository;
    private final DoctorRepository doctorRepository;
    private final PatientRepository patientRepository;
    private final PasswordEncoder passwordEncoder;

    @Value("${default.user.username:user}")
    private String defaultUserUsername;

    @Value("${default.user.password:password}")
    private String defaultUserPassword;

    @Value("${default.admin.username:admin}")
    private String defaultAdminUsername;

    @Value("${default.admin.password:adminpass}")
    private String defaultAdminPassword;

    @Value("${default.superuser.username:superuser}")
    private String defaultSuperuserUsername;

    @Value("${default.superuser.password:superpass}")
    private String defaultSuperuserPassword;

    public DataInitializer(UserRepository userRepository, DoctorRepository doctorRepository,
                           PatientRepository patientRepository, PasswordEncoder passwordEncoder) {
        this.userRepository = userRepository;
        this.doctorRepository = doctorRepository;
        this.patientRepository = patientRepository;
        this.passwordEncoder = passwordEncoder;
        logger.info("✅✅✅ DataInitializer CONSTRUCTOR CALLED");
    }

    @Override
    public void run(String... args) {
        try {
            logger.info("DataInitializer running...");

            // Core users
            createUserIfNotExists(defaultUserUsername, defaultUserPassword, UserRole.ROLE_STANDARDUSER);
            createUserIfNotExists(defaultAdminUsername, defaultAdminPassword, UserRole.ROLE_ADMIN);
            createUserIfNotExists(defaultSuperuserUsername, defaultSuperuserPassword, UserRole.ROLE_SUPERUSER);

            // Doctors (user1 - user5)
            for (int i = 1; i <= 5; i++) {
                String username = "user" + i;
                String password = "password";

                if (!userRepository.existsByUsername(username)) {
                    User user = new User();
                    user.setUsername(username);
                    user.setPassword(passwordEncoder.encode(password));
                    user.setRole(UserRole.ROLE_STANDARDUSER);
                    User savedUser = userRepository.save(user); // save and get managed instance

                    Doctor doctor = Doctor.builder()
                            .firstName("DoctorFirst" + i)
                            .lastName("DoctorLast" + i)
                            .speciality("Speciality" + i)
                            .user(savedUser)
                            .build();
                    doctorRepository.save(doctor);

                    logger.info("Created doctor user '{}' linked to doctor '{} {}'", username, doctor.getFirstName(), doctor.getLastName());
                }
            }

            // Patients (user6 - user10)
            for (int i = 6; i <= 10; i++) {
                String username = "user" + i;
                String password = "password";

                if (!userRepository.existsByUsername(username)) {
                    User user = new User();
                    user.setUsername(username);
                    user.setPassword(passwordEncoder.encode(password));
                    user.setRole(UserRole.ROLE_STANDARDUSER);
                    User savedUser = userRepository.save(user); // save and get managed instance

                    Patient patient = Patient.builder()
                            .firstName("PatientFirst" + i)
                            .lastName("PatientLast" + i)
                            .dateOfBirth("1990-01-" + String.format("%02d", i))
                            .user(savedUser)
                            .build();
                    patientRepository.save(patient);

                    logger.info("Created patient user '{}' linked to patient '{} {}'", username, patient.getFirstName(), patient.getLastName());
                }
            }

        } catch (Exception e) {
            logger.error("❌ Error during DataInitializer", e);
        }
    }

    private void createUserIfNotExists(String username, String password, UserRole role) {
        if (!userRepository.existsByUsername(username)) {
            User user = new User();
            user.setUsername(username);
            user.setPassword(passwordEncoder.encode(password));
            user.setRole(role);
            userRepository.save(user);
            logger.info("Created user '{}', role '{}'", username, role);
        }
    }

    @PostConstruct
    public void postConstruct() {
        logger.info("✅✅✅ DataInitializer POST CONSTRUCT CALLED");
    }
}


===== ./src/main/java/ch/zhaw/init/ehr/ehrbackend/config/PasswordEncoderConfig.java =====
package ch.zhaw.init.ehr.ehrbackend.config;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;

@Configuration
public class PasswordEncoderConfig {
    
    @Bean
    public PasswordEncoder passwordEncoder() {
        return new BCryptPasswordEncoder();
    }
}

===== ./src/main/java/ch/zhaw/init/ehr/ehrbackend/security/JwtUtil.java =====
package ch.zhaw.init.ehr.ehrbackend.security;

import io.jsonwebtoken.Claims;
import io.jsonwebtoken.Jwts;
import io.jsonwebtoken.security.Keys;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.stereotype.Component;

import javax.crypto.SecretKey;
import java.nio.charset.StandardCharsets;
import java.util.Date;

@Component
public class JwtUtil {

    private final SecretKey key = Keys.hmacShaKeyFor(
        "nm!I.GlC/0yWPC\"8b]<Qu4^cS8arT(.EAyZE>$Z.[H-$\"}|?qsY&n@bC`}Sb$Tm".getBytes(StandardCharsets.UTF_8)
    );

    private final long EXPIRATION_TIME = 86400000; // 1 day

    public String generateToken(String username, String role) {
        return Jwts.builder()
                .subject(username)
                .claim("role", role)
                .issuedAt(new Date())
                .expiration(new Date(System.currentTimeMillis() + EXPIRATION_TIME))
                .signWith(key)
                .compact();
    }

    public String extractUsername(String token) {
        return getClaims(token).getSubject();
    }

    public boolean validateToken(String token, UserDetails userDetails) {
        final String username = extractUsername(token);
        return username.equals(userDetails.getUsername()) && !isTokenExpired(token);
    }

    private boolean isTokenExpired(String token) {
        return getClaims(token).getExpiration().before(new Date());
    }

    private Claims getClaims(String token) {
        return Jwts.parser()
                .verifyWith(key)
                .build()
                .parseSignedClaims(token)
                .getPayload();
    }
}


===== ./src/main/java/ch/zhaw/init/ehr/ehrbackend/security/JWTAuthFilter.java =====
package ch.zhaw.init.ehr.ehrbackend.security;

import io.jsonwebtoken.Claims;
import io.jsonwebtoken.Jws;
import io.jsonwebtoken.Jwts;
import io.jsonwebtoken.security.Keys;
import lombok.RequiredArgsConstructor;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.web.authentication.WebAuthenticationDetailsSource;
import org.springframework.stereotype.Component;
import org.springframework.web.filter.OncePerRequestFilter;

import ch.zhaw.init.ehr.ehrbackend.service.UserService;

import jakarta.servlet.FilterChain;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.security.Key;
import java.util.Collections;

@Component
@RequiredArgsConstructor
public class JWTAuthFilter extends OncePerRequestFilter {

    private final JwtUtil jwtUtil;
    private final UserService userService;
    private static final Logger logger = LoggerFactory.getLogger(JWTAuthFilter.class);

    @Override
    protected void doFilterInternal(HttpServletRequest request,
                                    HttpServletResponse response,
                                    FilterChain filterChain) throws ServletException, IOException {

        final String authHeader = request.getHeader("Authorization");
        final String jwt;
        final String username;

        if (authHeader == null || !authHeader.startsWith("Bearer ")) {
            filterChain.doFilter(request, response);
            return;
        }

        jwt = authHeader.substring(7); // "Bearer " is 7 chars

        try {
            username = jwtUtil.extractUsername(jwt);

            if (username != null && SecurityContextHolder.getContext().getAuthentication() == null) {
                UserDetails userDetails = userService.loadUserByUsername(username);

                if (jwtUtil.validateToken(jwt, userDetails)) {
                    UsernamePasswordAuthenticationToken authToken = new UsernamePasswordAuthenticationToken(
                            userDetails, null, userDetails.getAuthorities());

                    authToken.setDetails(new WebAuthenticationDetailsSource().buildDetails(request));
                    SecurityContextHolder.getContext().setAuthentication(authToken);
                    logger.debug("Authenticated user '{}' via JWT", username);
                }
            }

        } catch (Exception ex) {
            logger.warn("JWT token validation error: {}", ex.getMessage());
        }

        filterChain.doFilter(request, response);
    }
}


===== ./src/main/java/ch/zhaw/init/ehr/ehrbackend/restservice/Greeting.java =====
package ch.zhaw.init.ehr.ehrbackend.restservice;

public record Greeting(long id, String content) { }

===== ./src/main/java/ch/zhaw/init/ehr/ehrbackend/restservice/GreetingController.java =====
package ch.zhaw.init.ehr.ehrbackend.restservice;

import java.util.concurrent.atomic.AtomicLong;

import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

@RestController
public class GreetingController {

	private static final String template = "Hello, %s!";
	private final AtomicLong counter = new AtomicLong();

	@GetMapping("/greetings")
	public Greeting greeting(@RequestParam(value = "name", defaultValue = "World") String name) {
		return new Greeting(counter.incrementAndGet(), String.format(template, name));
	}
}

===== ./src/main/java/ch/zhaw/init/ehr/ehrbackend/controller/FormTemplateController.java =====
// controller/FormTemplateController.java
package ch.zhaw.init.ehr.ehrbackend.controller;

import ch.zhaw.init.ehr.ehrbackend.model.FormTemplate;
import ch.zhaw.init.ehr.ehrbackend.service.FormTemplateService;
import lombok.RequiredArgsConstructor;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/formtemplate")
@RequiredArgsConstructor
public class FormTemplateController {

    private final FormTemplateService formTemplateService;

    @GetMapping
    public List<FormTemplate> listTemplates() {
        return formTemplateService.getAll();
    }

    @GetMapping("/{templateId}")
    public ResponseEntity<FormTemplate> getTemplate(@PathVariable String templateId) {
        return formTemplateService.getByTemplateId(templateId)
                .map(ResponseEntity::ok)
                .orElse(ResponseEntity.notFound().build());
    }

    @PostMapping
    public ResponseEntity<FormTemplate> createOrUpdateTemplate(@RequestBody FormTemplate template) {
        return ResponseEntity.ok(formTemplateService.save(template));
    }
}


===== ./src/main/java/ch/zhaw/init/ehr/ehrbackend/controller/TemplateController.java =====
package ch.zhaw.init.ehr.ehrbackend.controller;

import ch.zhaw.init.ehr.ehrbackend.model.Template;
import ch.zhaw.init.ehr.ehrbackend.service.TemplateService;
import lombok.RequiredArgsConstructor;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import java.io.IOException;
import java.util.List;

@RestController
@RequestMapping("/admin/templates")
@RequiredArgsConstructor
public class TemplateController {

    private final TemplateService templateService;

    @PostMapping("/upload")
    public ResponseEntity<Template> uploadTemplate(
        @RequestParam("file") MultipartFile file,
        @RequestParam(value = "templateName", required = false) String templateName,
        @RequestParam(value = "description", required = false) String description
    ) {
        try {
            Template saved = templateService.uploadTemplate(file, templateName, description);
            return ResponseEntity.ok(saved);
        } catch (IllegalArgumentException e) {
            return ResponseEntity.badRequest().body(null); // e.g. Template already exists
        } catch (IOException e) {
            e.printStackTrace();
            return ResponseEntity.status(500).body(null);
        }
    }

    @GetMapping
    public List<Template> getAllTemplates() {
        return templateService.getAllTemplates();
    }

    @GetMapping("/webtemplate/{templateId}")
    public ResponseEntity<String> getWebTemplateJson(@PathVariable String templateId) {
        try {
            String webTemplateJson = templateService.getWebTemplateJson(templateId);
            return ResponseEntity.ok(webTemplateJson);
        } catch (Exception e) {
            return ResponseEntity.status(500).body("Could not fetch WebTemplate: " + e.getMessage());
        }
    }

}


===== ./src/main/java/ch/zhaw/init/ehr/ehrbackend/controller/AuthController.java =====
package ch.zhaw.init.ehr.ehrbackend.controller;

import ch.zhaw.init.ehr.ehrbackend.dto.LoginRequest;
import ch.zhaw.init.ehr.ehrbackend.dto.LoginResponse;
import ch.zhaw.init.ehr.ehrbackend.model.User;
import ch.zhaw.init.ehr.ehrbackend.repository.UserRepository;
import ch.zhaw.init.ehr.ehrbackend.security.JwtUtil;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.web.bind.annotation.*;

@RestController
@RequestMapping("/login")
@CrossOrigin(origins = "*") // for frontend access during development
public class AuthController {

    @Autowired
    private UserRepository userRepository;

    @Autowired
    private PasswordEncoder passwordEncoder;

    @Autowired
    private JwtUtil jwtUtil;

    @PostMapping
    public ResponseEntity<?> login(@RequestBody LoginRequest request) {
        return userRepository.findByUsername(request.username)
                .filter(user -> passwordEncoder.matches(request.password, user.getPassword()))
                .map(user -> {
                    String token = jwtUtil.generateToken(user.getUsername(), user.getRole().name());
                    return ResponseEntity.ok(new LoginResponse(token, user.getRole().name()));
                })
                .orElse(ResponseEntity.status(401).body(new LoginResponse("Invalid credentials", null)));
    }
}


===== ./src/main/java/ch/zhaw/init/ehr/ehrbackend/controller/MedicalRecordController.java =====
package ch.zhaw.init.ehr.ehrbackend.controller;

import ch.zhaw.init.ehr.ehrbackend.model.MedicalRecord;
import ch.zhaw.init.ehr.ehrbackend.service.MedicalRecordService;
import lombok.RequiredArgsConstructor;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/record")
@RequiredArgsConstructor
public class MedicalRecordController {

    private final MedicalRecordService medicalRecordService;

    @PostMapping
    public MedicalRecord createRecord(@RequestBody MedicalRecord record) {
        return medicalRecordService.saveRecord(record);
    }

    @GetMapping("/{id}")
    public MedicalRecord getRecord(@PathVariable Long id) {
        return medicalRecordService.getRecord(id);
    }

    @GetMapping("/patient/{patientId}")
    public List<MedicalRecord> getRecordsByPatient(@PathVariable Long patientId) {
        return medicalRecordService.getRecordsByPatient(patientId);
    }
}


===== ./src/main/java/ch/zhaw/init/ehr/ehrbackend/controller/DoctorController.java =====
package ch.zhaw.init.ehr.ehrbackend.controller;

import ch.zhaw.init.ehr.ehrbackend.dto.DoctorDto;
import ch.zhaw.init.ehr.ehrbackend.dto.UserDto;
import ch.zhaw.init.ehr.ehrbackend.model.Doctor;
import ch.zhaw.init.ehr.ehrbackend.service.DoctorService;
import lombok.RequiredArgsConstructor;

import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/doctor")
@RequiredArgsConstructor
public class DoctorController {

    private final DoctorService doctorService;

    @GetMapping("/all")
    public List<DoctorDto> getAllDoctors() {
        return doctorService.getAllDoctors().stream()
            .map(this::toDto)
            .toList();
    }

    @GetMapping("/{id}")
    public DoctorDto getDoctorById(@PathVariable Long id) {
        return toDto(doctorService.getDoctor(id));
    }

    private DoctorDto toDto(Doctor doctor) {
        return new DoctorDto(
            doctor.getId(),
            doctor.getFirstName(),
            doctor.getLastName(),
            doctor.getSpeciality(),
            new UserDto(
                doctor.getUser().getId(),
                doctor.getUser().getUsername(),
                doctor.getUser().getRole()
            )
        );
    }

    @PostMapping
    public Doctor createDoctor(@RequestBody Doctor doctor) {
        return doctorService.saveDoctor(doctor);
    }
    
    @PutMapping("/{id}")
    public Doctor updateDoctor(@PathVariable Long id, @RequestBody Doctor doctor) {
        doctor.setId(id);
        return doctorService.saveDoctor(doctor);
    }

    @DeleteMapping("/{id}")
    public ResponseEntity<?> deleteDoctor(@PathVariable Long id) {
        doctorService.deleteDoctor(id);
        return ResponseEntity.noContent().build();
    }
}


===== ./src/main/java/ch/zhaw/init/ehr/ehrbackend/controller/WebTemplateController.java =====
import ch.zhaw.init.ehr.ehrbackend.service.EhrbaseRestClient;
import lombok.RequiredArgsConstructor;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

@RestController
@RequestMapping("/template")
@RequiredArgsConstructor
public class WebTemplateController {

    private final EhrbaseRestClient ehrbaseRestClient;

    @GetMapping("/{templateId}/webtemplate")
    public ResponseEntity<?> getWebTemplate(@PathVariable String templateId) {
        try {
            String webTemplateJson = ehrbaseRestClient.getWebTemplateJson(templateId);
            return ResponseEntity.ok(webTemplateJson);
        } catch (RuntimeException e) {
            return ResponseEntity.status(500).body("Error fetching WebTemplate: " + e.getMessage());
        }
    }
}

===== ./src/main/java/ch/zhaw/init/ehr/ehrbackend/controller/CompositionController.java =====
package ch.zhaw.init.ehr.ehrbackend.controller;

import ch.zhaw.init.ehr.ehrbackend.dto.CompositionSubmissionRequest;
import ch.zhaw.init.ehr.ehrbackend.service.EhrbaseRestClient;
import lombok.RequiredArgsConstructor;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import com.fasterxml.jackson.databind.ObjectMapper;

@RestController
@RequestMapping("/ehr")
@RequiredArgsConstructor
public class CompositionController {

    private final EhrbaseRestClient ehrbaseRestClient;

    @PostMapping("/composition")
    public ResponseEntity<?> submitComposition(@RequestBody CompositionSubmissionRequest request) {
        System.out.println("composition: " + request.getCompositionJson());
        try {
            ObjectMapper objectMapper = new ObjectMapper();
            String jsonString = objectMapper.writeValueAsString(request.getCompositionJson());
            String compositionUid = ehrbaseRestClient.submitComposition(request.getEhrId(), request.getTemplateId(), jsonString);

            return ResponseEntity.ok("✅ Composition saved with UID: " + compositionUid);
        } catch (Exception e) {
            return ResponseEntity.status(500).body("❌ Failed to submit composition: " + e.getMessage());
        }
    }
}


===== ./src/main/java/ch/zhaw/init/ehr/ehrbackend/controller/PatientController.java =====
package ch.zhaw.init.ehr.ehrbackend.controller;

import ch.zhaw.init.ehr.ehrbackend.dto.PatientDto;
import ch.zhaw.init.ehr.ehrbackend.dto.UserDto;
import ch.zhaw.init.ehr.ehrbackend.model.Patient;
import ch.zhaw.init.ehr.ehrbackend.service.PatientService;
import lombok.RequiredArgsConstructor;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/patient")
@RequiredArgsConstructor
public class PatientController {

    private final PatientService patientService;

    @PostMapping
    public Patient createPatient(@RequestBody Patient patient) {
        return patientService.savePatient(patient);
    }

    @GetMapping("/all")
    public List<PatientDto> getAllPatients() {
        return patientService.getAllPatients().stream()
            .map(this::toDto)
            .toList();
    }

    @GetMapping("/{id}")
    public PatientDto getPatient(@PathVariable Long id) {
        return toDto(patientService.getPatient(id));
    }

    private PatientDto toDto(Patient patient) {
        return new PatientDto(
            patient.getId(),
            patient.getFirstName(),
            patient.getLastName(),
            patient.getDateOfBirth(),
            new UserDto(
                patient.getUser().getId(),
                patient.getUser().getUsername(),
                patient.getUser().getRole()
            )
        );
    }

}


===== ./src/main/java/ch/zhaw/init/ehr/ehrbackend/controller/UserController.java =====
package ch.zhaw.init.ehr.ehrbackend.controller;

import ch.zhaw.init.ehr.ehrbackend.dto.UserDto;
import ch.zhaw.init.ehr.ehrbackend.model.User;
import ch.zhaw.init.ehr.ehrbackend.service.UserService;
import lombok.RequiredArgsConstructor;
import org.springframework.web.bind.annotation.*;

import java.util.List;
import java.util.stream.Collectors;

@RestController
@RequestMapping("/user")
@RequiredArgsConstructor
public class UserController {

    private final UserService userService;

    @PostMapping
    public UserDto createUser(@RequestBody User user) {
        User saved = userService.saveUser(user);
        return toDto(saved);
    }

    @GetMapping("/{id}")
    public UserDto getUser(@PathVariable Long id) {
        return toDto(userService.getUser(id));
    }

    @GetMapping
    public List<UserDto> getAllUsers() {
        return userService.getAllUsers()
                .stream()
                .map(this::toDto)
                .collect(Collectors.toList());
    }

    private UserDto toDto(User user) {
        return new UserDto(user.getId(), user.getUsername(), user.getRole());
    }
}


===== ./src/main/java/ch/zhaw/init/ehr/ehrbackend/EhrbackendApplication.java =====
package ch.zhaw.init.ehr.ehrbackend;

import java.util.Arrays;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.context.ConfigurableApplicationContext;


@SpringBootApplication(scanBasePackages = "ch.zhaw.init.ehr.ehrbackend")
public class EhrbackendApplication {
    public static void main(String[] args) {
        ConfigurableApplicationContext context = SpringApplication.run(EhrbackendApplication.class, args);

        System.out.println("✅ Registered beans:");
        Arrays.stream(context.getBeanDefinitionNames())
                .filter(bean -> bean.toLowerCase().contains("datainitializer"))
                .forEach(System.out::println);
    }
}



===== ./src/main/java/ch/zhaw/init/ehr/ehrbackend/HelloRunner.java =====
package ch.zhaw.init.ehr.ehrbackend;

import org.slf4j.LoggerFactory;
import org.springframework.boot.CommandLineRunner;
import org.springframework.stereotype.Component;

import ch.zhaw.init.ehr.ehrbackend.config.DataInitializer;

@Component
public class HelloRunner implements CommandLineRunner {
    private static final org.slf4j.Logger logger = LoggerFactory.getLogger(DataInitializer.class);

    @Override
    public void run(String... args) {
        logger.info("✅✅✅ DataInitializer CONSTRUCTOR CALLED");
        logger.debug("✅✅✅ DataInitializer CONSTRUCTOR CALLED");
        logger.error("✅✅✅ DataInitializer CONSTRUCTOR CALLED");
        System.out.println("✅ HelloRunner ran");
    }
}

===== ./src/main/java/ch/zhaw/init/ehr/ehrbackend/model/UserRole.java =====
package ch.zhaw.init.ehr.ehrbackend.model;

public enum UserRole {
    ROLE_SUPERUSER,
    ROLE_ADMIN,
    ROLE_DOCTOR,
    ROLE_PATIENT,
    ROLE_STANDARDUSER
}

===== ./src/main/java/ch/zhaw/init/ehr/ehrbackend/model/User.java =====
package ch.zhaw.init.ehr.ehrbackend.model;

import java.util.Set;

import jakarta.persistence.*;
import lombok.Getter;
import lombok.Setter;

@Getter
@Setter
@Entity
@Table(name = "users")
public class User {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @Column(unique = true, nullable = false)
    private String username;

    @Column(nullable = false)
    private String password;  // BCrypt encoded

    @Enumerated(EnumType.STRING)
    private UserRole role;

}


===== ./src/main/java/ch/zhaw/init/ehr/ehrbackend/model/Doctor.java =====
package ch.zhaw.init.ehr.ehrbackend.model;

import jakarta.persistence.*;
import lombok.*;

@Entity
@Getter @Setter @NoArgsConstructor @AllArgsConstructor @Builder
public class Doctor {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    private String firstName;
    private String lastName;
    private String speciality;

    @OneToOne
    @JoinColumn(name = "user_id", referencedColumnName = "id", unique = true, nullable = false)
    private User user;
}

===== ./src/main/java/ch/zhaw/init/ehr/ehrbackend/model/FormTemplate.java =====
package ch.zhaw.init.ehr.ehrbackend.model;



import java.time.LocalDate;

import jakarta.persistence.*;
import lombok.*;

@Entity
@Getter @Setter @NoArgsConstructor @AllArgsConstructor @Builder
public class FormTemplate {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    private String templateId; 

    private String name;      

    @Lob
    private String formConfigJson; 
    
}

===== ./src/main/java/ch/zhaw/init/ehr/ehrbackend/model/Template.java =====
package ch.zhaw.init.ehr.ehrbackend.model;

import jakarta.persistence.*;
import lombok.*;

@Entity
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class Template {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @Column(unique = true, nullable = false)
    private String templateId;

    private String name;

    private String description;

    @Lob
    private String rawXml; // store the .opt content (optional, can skip this if large)
}

===== ./src/main/java/ch/zhaw/init/ehr/ehrbackend/model/Patient.java =====
package ch.zhaw.init.ehr.ehrbackend.model;

import jakarta.persistence.*;
import lombok.*;

@Entity
@Getter @Setter @NoArgsConstructor @AllArgsConstructor @Builder
public class Patient {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    private String firstName;
    private String lastName;
    private String dateOfBirth;

    @OneToOne
    @JoinColumn(name = "user_id", referencedColumnName = "id", unique = true, nullable = false)
    private User user;
}


===== ./src/main/java/ch/zhaw/init/ehr/ehrbackend/model/MedicalRecord.java =====
package ch.zhaw.init.ehr.ehrbackend.model;

import jakarta.persistence.*;
import lombok.*;

@Entity
@Getter @Setter @NoArgsConstructor @AllArgsConstructor @Builder
public class MedicalRecord {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @ManyToOne
    private Patient patient;

    @ManyToOne
    private Doctor doctor;

    @Column(length = 5000)
    private String notes;

    private String date; // TODO: change to LocalDate
}


===== ./src/main/java/ch/zhaw/init/ehr/ehrbackend/service/UserService.java =====
package ch.zhaw.init.ehr.ehrbackend.service;

import ch.zhaw.init.ehr.ehrbackend.model.User;
import ch.zhaw.init.ehr.ehrbackend.repository.UserRepository;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.security.core.userdetails.User.UserBuilder;
import org.springframework.security.core.userdetails.User.UserBuilder.*;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;

@Service
public class UserService implements UserDetailsService {

    @Autowired
    private UserRepository userRepository;

    @Autowired
    private PasswordEncoder passwordEncoder;

    @Override
    public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {
        User user = userRepository.findByUsername(username)
            .orElseThrow(() -> new UsernameNotFoundException("User not found"));

        return org.springframework.security.core.userdetails.User
                .withUsername(user.getUsername())
                .password(user.getPassword())
                .roles(user.getRole().name().replace("ROLE_", ""))
                .build();
    }

    public User saveUser(User user) {
        user.setPassword(passwordEncoder.encode(user.getPassword()));
        return userRepository.save(user);
    }

    public User getUser(Long id) {
        return userRepository.findById(id)
                .orElseThrow(() -> new RuntimeException("User not found: " + id));
    }

    public List<User> getAllUsers() {
        return userRepository.findAll();
    }
}


===== ./src/main/java/ch/zhaw/init/ehr/ehrbackend/service/PatientService.java =====
package ch.zhaw.init.ehr.ehrbackend.service;

import ch.zhaw.init.ehr.ehrbackend.model.Patient;
import ch.zhaw.init.ehr.ehrbackend.repository.PatientRepository;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
@RequiredArgsConstructor
public class PatientService {
    private final PatientRepository patientRepository;

    public Patient savePatient(Patient patient) {
        return patientRepository.save(patient);
    }

    public List<Patient> getAllPatients() {
        return patientRepository.findAll();
    }

    public Patient getPatient(Long id) {
        return patientRepository.findById(id).orElseThrow();
    }
}

===== ./src/main/java/ch/zhaw/init/ehr/ehrbackend/service/TemplateService.java =====
package ch.zhaw.init.ehr.ehrbackend.service;

import ch.zhaw.init.ehr.ehrbackend.model.Template;
import ch.zhaw.init.ehr.ehrbackend.repository.TemplateRepository;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.multipart.MultipartFile;

import java.io.IOException;
import java.util.List;

@Service
@RequiredArgsConstructor
public class TemplateService {

    private final TemplateRepository templateRepository;

    private final EhrbaseRestClient ehrbaseRestClient;

    public Template uploadTemplate(MultipartFile file, String name, String description) throws IOException {
        String rawXml = new String(file.getBytes());
        String templateId = extractTemplateId(rawXml); //TODO: Remove placeholder
        String extractedName = extractTemplateName(rawXml);     
        
        if (templateRepository.existsByTemplateId(templateId)) {
            throw new IllegalArgumentException("Template already exists: " + templateId);
        }

        ehrbaseRestClient.uploadTemplateToEhrbase(rawXml);

        Template template = Template.builder()
            .templateId(templateId)
            .name(name != null ? name : extractedName)
            .description(description)
            .rawXml(rawXml)
            .build();

        return templateRepository.save(template);
    }

    public List<Template> getAllTemplates() {
        return templateRepository.findAll();
    }

    public String getWebTemplateJson(String templateId) {
        return ehrbaseRestClient.getWebTemplateJson(templateId);
    }

    private String extractTemplateId(String xml) {
        String startTag = "<template_id>";
        String valueStart = "<value>";
        String valueEnd = "</value>";
        int start = xml.indexOf(startTag);
        if (start == -1) return null;
        int valueStartIndex = xml.indexOf(valueStart, start);
        int valueEndIndex = xml.indexOf(valueEnd, valueStartIndex);
        return xml.substring(valueStartIndex + valueStart.length(), valueEndIndex).trim();
    }
    
    private String extractTemplateName(String xml) {
        String startTag = "<name>";
        String valueStart = "<value>";
        String valueEnd = "</value>";
        int start = xml.indexOf(startTag);
        if (start == -1) return null;
        int valueStartIndex = xml.indexOf(valueStart, start);
        int valueEndIndex = xml.indexOf(valueEnd, valueStartIndex);
        return xml.substring(valueStartIndex + valueStart.length(), valueEndIndex).trim();
    }
}


===== ./src/main/java/ch/zhaw/init/ehr/ehrbackend/service/MedicalRecordService.java =====
package ch.zhaw.init.ehr.ehrbackend.service;

import ch.zhaw.init.ehr.ehrbackend.model.MedicalRecord;
import ch.zhaw.init.ehr.ehrbackend.repository.MedicalRecordRepository;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
@RequiredArgsConstructor
public class MedicalRecordService {

    private final MedicalRecordRepository medicalRecordRepository;

    public MedicalRecord saveRecord(MedicalRecord record) {
        return medicalRecordRepository.save(record);
    }

    public MedicalRecord getRecord(Long id) {
        return medicalRecordRepository.findById(id)
                .orElseThrow(() -> new RuntimeException("Record not found: " + id));
    }

    public List<MedicalRecord> getRecordsByPatient(Long patientId) {
        return medicalRecordRepository.findByPatientId(patientId);
    }
}


===== ./src/main/java/ch/zhaw/init/ehr/ehrbackend/service/DoctorService.java =====
package ch.zhaw.init.ehr.ehrbackend.service;

import ch.zhaw.init.ehr.ehrbackend.model.Doctor;
import ch.zhaw.init.ehr.ehrbackend.repository.DoctorRepository;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
@RequiredArgsConstructor
public class DoctorService {

    private final DoctorRepository doctorRepository;

    public Doctor saveDoctor(Doctor doctor) {
        return doctorRepository.save(doctor);
    }

    public Doctor getDoctor(Long id) {
        return doctorRepository.findById(id)
                .orElseThrow(() -> new RuntimeException("Doctor not found: " + id));
    }

    public List<Doctor> getAllDoctors() {
        return doctorRepository.findAll();
    }

    public void deleteDoctor(Long id) {
        doctorRepository.deleteById(id);
    }
}

===== ./src/main/java/ch/zhaw/init/ehr/ehrbackend/service/FormTemplateService.java =====
package ch.zhaw.init.ehr.ehrbackend.service;

import ch.zhaw.init.ehr.ehrbackend.model.FormTemplate;
import ch.zhaw.init.ehr.ehrbackend.repository.FormTemplateRepository;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.Optional;

@Service
@RequiredArgsConstructor
public class FormTemplateService {

    private final FormTemplateRepository formTemplateRepository;

    public List<FormTemplate> getAll() {
        return formTemplateRepository.findAll();
    }

    public Optional<FormTemplate> getByTemplateId(String templateId) {
        return formTemplateRepository.findByTemplateId(templateId);
    }

    public FormTemplate save(FormTemplate template) {
        return formTemplateRepository.save(template);
    }

    public void delete(Long id) {
        formTemplateRepository.deleteById(id);
    }
}


===== ./src/main/java/ch/zhaw/init/ehr/ehrbackend/service/EhrbaseRestClient.java =====
// src/main/java/ch/zhaw/init/ehr/ehrbackend/service/EhrbaseRestClient.java
package ch.zhaw.init.ehr.ehrbackend.service;

import lombok.RequiredArgsConstructor;

import java.util.List;
import java.util.logging.Logger;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.*;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;

@Service
@RequiredArgsConstructor
public class EhrbaseRestClient {

    @Value("${ehrbase.url}")
    private String ehrbaseUrl;


    public void uploadTemplateToEhrbase(String xml) {
        RestTemplate restTemplate = new RestTemplate();
        HttpHeaders headers = new HttpHeaders();
        headers.setContentType(MediaType.APPLICATION_XML);
        HttpEntity<String> request = new HttpEntity<>(xml, headers);

        String url = ehrbaseUrl + "/definition/template/adl1.4";

        ResponseEntity<String> response = restTemplate.exchange(url, HttpMethod.POST, request, String.class);

        if (!response.getStatusCode().is2xxSuccessful()) {
            throw new RuntimeException("Failed to upload template to EHRbase: " + response.getStatusCode());
        }
    }

    public String getWebTemplateJson(String templateId) {
        RestTemplate restTemplate = new RestTemplate();
        HttpHeaders headers = new HttpHeaders();
        headers.setAccept(List.of(MediaType.APPLICATION_JSON));
    
        HttpEntity<String> entity = new HttpEntity<>(headers);
        String url = ehrbaseUrl + "/definition/template//adl1.4/" + templateId;
    
        ResponseEntity<String> response = restTemplate.exchange(
            url,
            HttpMethod.GET,
            entity,
            String.class
        );
    
        if (!response.getStatusCode().is2xxSuccessful()) {
            // log the error or handle it as needed
            System.err.println("Error fetching WebTemplate: " + response.getStatusCode());
            throw new RuntimeException("EHRbase returned status: " + response.getStatusCode());
        }
    
        return response.getBody();
    }

    public String submitComposition(String ehrId, String templateId, String compositionJson) {
        RestTemplate restTemplate = new RestTemplate();
        HttpHeaders headers = new HttpHeaders();
        headers.setContentType(MediaType.APPLICATION_JSON);
        headers.setAccept(List.of(MediaType.APPLICATION_JSON));
    
        HttpEntity<String> request = new HttpEntity<>(compositionJson, headers);
    
        String url = ehrbaseUrl + "/ehr/" + ehrId + "/composition?templateId=" + templateId + "&format=FLAT";
    
        ResponseEntity<String> response = restTemplate.exchange(
            url, HttpMethod.POST, request, String.class
        );
    
        if (!response.getStatusCode().is2xxSuccessful()) {
            throw new RuntimeException("Failed to submit composition to EHRbase: " + response.getStatusCode());
        }
    
        //TODO: parse the UID from response if needed
        return response.getBody();
    }
    
    
}


